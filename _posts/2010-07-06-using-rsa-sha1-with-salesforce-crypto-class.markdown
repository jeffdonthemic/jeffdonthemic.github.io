---
layout: post
title:  Using RSA-SHA1 with Salesforce Crypto Class
description: This is a rather obscure post but it will definitely come in handy to someone trying to use the RSA-SHA1 algorithm with the Salesforce Crypto class. Im spent the past two days trying to hook up OAuth using Apex and various Google Services. The standard HMAC-SHA1 algorithm is fairly straight forward with OAuth and Google but when you are required to register a domain and upload a certificate... well things get somewhat hairy. Theres very little documentation on the RSA-SHA2 algorithm and I could 
date: 2010-07-06 20:28:31 +0300
image:  '/images/slugs/using-rsa-sha1-with-salesforce-crypto-class.jpg'
tags:   ["code sample", "google", "salesforce", "apex"]
---
<p style="clear: both">This is a rather obscure post but it will definitely come in handy to someone trying to use the RSA-SHA1 algorithm with the Salesforce Crypto class. I'm spent the past two days trying to hook up OAuth using Apex and various Google Services. The standard HMAC-SHA1 algorithm is fairly straight forward with OAuth and Google but when you are required to register a domain and upload a certificate... well things get somewhat hairy. There's very little documentation on the RSA-SHA2 algorithm and I could only find one relevant post on the topic.</p><p style="clear: both">According to the <a href="http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_classes_restful_crypto.htm">Crypto docs</a>, the arguments for the <strong><u>sign</u></strong> method are an algorithm name (i.e., RSA-SHA1), an input Blob (the string to encrypt) and a privateKey Blob. The value of privateKey must be decoded using the EncodingUtilbase64Decode method, and should be in <a href="http://www.rsa.com/rsalabs/node.asp?id=2130" target="_blank">RSA's PKCS #8 (1.2) Private-Key Information Syntax Standard form</a>. </p><p style="clear: both">The sample code from the docs doesn't help determining how to obtain the privateKey:</p>
{% highlight js %}String algorithmName = 'RSA';
String key = 'pkcs8 format private key';
Blob privateKey = EncodingUtil.base64Decode(key);
Blob input = Blob.valueOf('12345qwerty');
Crypto.sign(algorithmName, input, privateKey);
{% endhighlight %}
<p style="clear: both">So after a couple of days of trial and error, swearing and sticking needles in my eyes, I finally came up with the solution for Google. It may not apply to other services but the methodology is roughly the same for the privateKey.</p><p style="clear: both">The first step is to generate a self-signing public certificate and private key. You can find more info <a href="http://code.google.com/apis/gdata/docs/auth/authsub.html#Registered" target="_blank">here</a>. Open terminal and run the following:</p>
{% highlight js %}openssl req -x509 -nodes -days 365 -newkey rsa:1024 -sha1 -subj '/C=US/ST=CA/L=San Mateo/CN=www.appirio.com' -keyout key-mycompanyrsa.pem -out cert-mycompanyrsa.pem
{% endhighlight %}
<p style="clear: both">This will spit out a cert file (cert-mycompanyrsa.pem) and private key file (key-mycompanyrsa.pem). Then upload the cert to your domain for the <a href="https://www.google.com/accounts/ManageDomains" target="_blank">Google account</a>. This will generate a consumer key and a consumer secret for your application.</p><p style="clear: both">Now here was my mistake. I was opening the private key file (key-mycompanyrsa.pem) and using the contents of this file in my Apex code for the privateKey Blob value. Google was choking when creating the OAuth request token saying that the signature was incorrect: <strong><em>signature_invalid</em></strong>.</p><p style="clear: both">Here's the fix. You need to use the private key file (key-mycompanyrsa.pem) with the openssl pkcs8 command to process the private keys into PKCS#8 format.</p><p style="clear: both">Open terminal again and run:</p>
{% highlight js %}openssl pkcs8 -topk8 -nocrypt -in key-mycompanyrsa.pem -outform PEM
{% endhighlight %}
<p style="clear: both">This will display a new private key in terminal and <strong><em>THIS</em></strong> is the value you use for the privateKey argument for the sign method. Just copy everything betweek the "begin" line and "end" line.</p><p style="clear: both"><a href="http://old.jeffdouglas.com/wp-content/uploads/2010/07/privatekey.png" class="image-link"><img class="linked-to-original" src="http://res.cloudinary.com/blog-jeffdouglas-com/image/upload/v1401030326/tv5rabglznu1hyzuexbo.png" height="275" align="left" width="380" style=" display: inline; float: left; margin: 0 10px 10px 0;" /></a></p><br class="final-break" style="clear: both" />
