---
layout: post
title:  Salesforce Lightning - The Enterprise JavaScript Component Framework
description: I presented to the the San Diego Salesforce Developer Group a couple of weeks ago during Lightning Developer Week using a deck supplied by Salesforce. The slide on Lightning Components (below) really didnt resonate with me and got me thinking. When viewed in comparison to other frameworks, Salesforce Lightning  reminds me of that Sesame Street song, One to these Things is not like the other . While Salesforce Lightning is an entire component framework and platform for developing enterprise app
date: 2015-03-24 20:36:57 +0300
image:  '/images/pexels-nick-kwan-2693284.jpg'
tags:   ["salesforce", "lightning"]
---
<p>I presented to the the <a href="/2015/03/13/tutorial-building-lightning-components-with-spring-15/">San Diego Salesforce Developer Group a couple of weeks ago</a> during <a href="https://developer.salesforce.com/blogs/developer-relations/2015/02/lightning-developer-week-strikes-100-cities.html">Lightning Developer Week</a> using a deck supplied by Salesforce. The slide on Lightning Components (below) really didnt resonate with me and got me thinking. When viewed in comparison to other frameworks, <a href="http://www.salesforce.com/platform/services/lightning/">Salesforce Lightning</a> reminds me of that Sesame Street song, <a href="https://www.youtube.com/watch?v=FClGhto1vIg">One to these Things is not like the other</a>. While Salesforce Lightning is an entire component framework and platform for developing enterprise applications, most of the other component frameworks concern themselves mainly with the view portion of the application. Lets see from a high level how they compare.</p>
<p><img src="images/js-component-frameworks.png" alt="" ></p>
<h2 id="googlepolymer">Google Polymer</h2>
<p><a href="https://www.polymer-project.org/0.5/">Polymer</a> is a framework for building components and SPAs on top of <a href="http://webcomponents.org/">Web Components</a> technologies. Polymer components look very similar to Angular Directives and in the long run Im not sure how Polymer and Angular are going to live together at Google? Apparently Angular will implement a lot of the same functionality in 2.0. Harshit Pandey has <a href="http://www.oyecode.com/search?q=polymer">a number of great posts</a> on how to build applications on Salesforce using Polymer. IMHO, Polymer is probably the closest in comparison to Lightning.</p>
<h2 id="facebookreact">Facebook React</h2>
<p><a href="http://facebook.github.io/react/">React</a> is a JavaScript library for building view components. Thats all. Its key feature is fast DOM manipulation via a Shadow DOM. Since theres no specific data transport layer, React relies on Flux for this functionality. React supports inheritance through mixins.</p>
<h2 id="twitterflight">Twitter Flight</h2>
<p><a href="https://flightjs.github.io/">Flight</a> is also an event-driven JavaScript framework that maps behavior to DOM nodes for the view layer. It doesnt prescribe or provide any particular approach to rendering or providing data to a web application. Similar to React, Flight supports inheritance through mixins.</p>
<h2 id="mozillabrick">Mozilla Brick</h2>
<p><a href="http://brick.mozilla.io/">Brick</a> is a collection of UI components designed for easy and quick building of web application UIs. Brick is not a framework. It is only concerned with building webapp interfaces using the Web Components standard.</p>
<h2 id="saleforcelightning">Saleforce Lightning</h2>
<p><a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/">Lightning</a> is different for those above in that it was designed first and foremost for enterprise applications. Lighting has a rich, elegant event driven architecture that appeals to JavaScript developers and all of the power of the Force.com platform. Unlike other component frameworks where you typically have to roll your own backend functionality, authentication and connectivity, with Lightning you simply expose server-side Apex functionality with a single annotation and then instruct the component to utilize it. Thats it! Now you have access to workflow, data validation, queues, bulk processing, reporting, dashboards and much, much more.</p>
<p>Lighting components encapsulate functionality, markup and CSS into reusable, functional units that can be assembled into larger components or complete applications. Plus, with a simple <em>appHostable</em> tag you can expose your component in Salesforce1 and instantly become a mobile application!</p>
<p>The power of the component framework is in its ease of customization. Developers can combine multiple components into larger ones or even applications and build upon one another with Java-like inheritance. Simply include the <em>extends</em> tag and your component has all of the functionality of its super component.</p>
<p>In addition to creating entirely new applications, with the Lightning Extensions Pilot, you can write components that override standard Salesforce functionality. Soon youll no longer have to create a custom Visualforce Page simply to make a single field on the page layout act differently. Lightning Components will allow you to define your own functionality for parts of the standard Salesforce interface.</p>
<p>However, Salesforce isnt resting on its laurels with Lightning. Currently in Pilot, the Lightning App Builder allows non-developers to drag and drop Lightning Components to assemble enterprise application. This enables both coders and non-coders to become enterprise application developers.</p>
<p>Processing close to <strong>3 Billion transactions a day</strong>, Salesforce knows how to build enterprise applications. The Lightning Component framework is enterprise application development.</p>

